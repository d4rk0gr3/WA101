ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"EZI2C_EZI2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.EZI2C_EZI2C_NO_STRETCH_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	EZI2C_EZI2C_NO_STRETCH_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	EZI2C_EZI2C_NO_STRETCH_ISR, %function
  23              	EZI2C_EZI2C_NO_STRETCH_ISR:
  24              	.LFB1:
  25              		.file 1 "Generated_Source\\PSoC4\\EZI2C_EZI2C_INT.c"
   1:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * \file EZI2C_EZI2C_INT.c
   3:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * \version 3.20
   4:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** *
   5:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** *  the SCB Component in EZI2C mode.
   8:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** *
   9:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** *
  11:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * Copyright 2013-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  19:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** #include "EZI2C_PVT.h"
  20:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** #include "EZI2C_EZI2C_PVT.h"
  21:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  22:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  23:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** #if(EZI2C_EZI2C_SCL_STRETCH_ENABLE_CONST)
  24:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     /*******************************************************************************
  25:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     * Function Name: EZI2C_EZI2C_STRETCH_ISR
  26:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     ****************************************************************************//**
  27:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *
  28:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *  Handles the Interrupt Service Routine for the SCB EZI2C mode.
  29:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *  The clock stretching is used during operation.
  30:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *
  31:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *******************************************************************************/
  32:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     CY_ISR_PROTO(EZI2C_EZI2C_STRETCH_ISR)
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 2


  33:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     {
  34:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         static uint16 locBufSize;
  35:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locIndex;
  36:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locStatus;
  37:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  38:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 endTransfer;
  39:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 fifoIndex;
  40:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locByte;
  41:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  42:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locIntrCause;
  43:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locIntrSlave;
  44:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  45:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #ifdef EZI2C_EZI2C_STRETCH_ISR_ENTRY_CALLBACK
  46:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         EZI2C_EZI2C_STRETCH_ISR_EntryCallback();
  47:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* EZI2C_EZI2C_STRETCH_ISR_ENTRY_CALLBACK */
  48:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  49:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #if(EZI2C_SECONDARY_ADDRESS_ENABLE_CONST)
  50:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Variable intended to be used with either buffer */
  51:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         static volatile uint8 * EZI2C_dataBuffer; /* Pointer to data buffer              */
  52:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         static uint16 EZI2C_bufSizeBuf;           /* Size of buffer in bytes             */
  53:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         static uint16 EZI2C_protectBuf;           /* Start index of write protected area */
  54:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  55:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         static uint8 activeAddress;
  56:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 ackResponse;
  57:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  58:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         ackResponse = EZI2C_EZI2C_ACK_RECEIVED_ADDRESS;
  59:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* (EZI2C_SECONDARY_ADDRESS_ENABLE_CONST) */
  60:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  61:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #if !defined (CY_REMOVE_EZI2C_CUSTOM_INTR_HANDLER)
  62:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         if(NULL != EZI2C_customIntrHandler)
  63:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         {
  64:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_customIntrHandler();
  65:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         }
  66:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #else
  67:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         CY_EZI2C_CUSTOM_INTR_HANDLER();
  68:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* !defined (CY_REMOVE_EZI2C_CUSTOM_INTR_HANDLER) */
  69:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  70:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Make local copy of global variable */
  71:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         locIndex = EZI2C_EZI2C_GET_INDEX(activeAddress);
  72:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  73:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Get interrupt sources */
  74:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         locIntrSlave = EZI2C_GetSlaveInterruptSource();
  75:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         locIntrCause = EZI2C_GetInterruptCause();
  76:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  77:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* INTR_SLAVE.I2C_ARB_LOST and INTR_SLAVE_I2C.BUS_ERROR */
  78:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Handles errors on the bus. There are cases when both bits are set.
  79:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         * The error recovery is common: re-enable the scb IP. The content of the RX FIFO is lost.
  80:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         */
  81:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         if(0u != (locIntrSlave & (EZI2C_INTR_SLAVE_I2C_ARB_LOST |
  82:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                   EZI2C_INTR_SLAVE_I2C_BUS_ERROR)))
  83:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         {
  84:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_CTRL_REG &= (uint32) ~EZI2C_CTRL_ENABLED; /* Disable SCB block */
  85:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  86:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #if(EZI2C_CY_SCBIP_V0)
  87:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != ((uint8) EZI2C_EZI2C_STATUS_BUSY & EZI2C_curStatus))
  88:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #endif /* (EZI2C_CY_SCBIP_V0) */
  89:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 3


  90:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_curStatus &= (uint8) ~EZI2C_EZI2C_STATUS_BUSY;
  91:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_curStatus |= (uint8)  EZI2C_EZI2C_STATUS_ERR;
  92:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
  93:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* INTR_TX_EMPTY is enabled in the address phase to receive data */
  94:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if(0u == (EZI2C_GetTxInterruptMode() & EZI2C_INTR_TX_EMPTY))
  95:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
  96:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Write complete */
  97:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(EZI2C_indexBuf1 != EZI2C_offsetBuf1)
  98:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
  99:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_curStatus |= (uint8) EZI2C_INTR_SLAVE_I2C_WRITE_STOP;
 100:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 101:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 102:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 else
 103:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 104:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Read complete */
 105:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_curStatus |= (uint8) EZI2C_INTR_SLAVE_I2C_NACK;
 106:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 107:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 108:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 109:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_DISABLE_SLAVE_AUTO_DATA;
 110:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 111:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Disable TX and RX interrupt sources */
 112:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_SetRxInterruptMode(EZI2C_NO_INTR_SOURCES);
 113:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_SetTxInterruptMode(EZI2C_NO_INTR_SOURCES);
 114:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 115:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #if(EZI2C_CY_SCBIP_V0)
 116:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Clear interrupt sources as they are not automatically cleared after SCB is disabled 
 117:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_ClearRxInterruptSource(EZI2C_INTR_RX_ALL);
 118:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_ClearSlaveInterruptSource(EZI2C_INTR_SLAVE_ALL);
 119:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #endif /* (EZI2C_CY_SCBIP_V0) */
 120:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 121:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_fsmState = EZI2C_EZI2C_FSM_IDLE;
 122:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 123:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_CTRL_REG |= (uint32) EZI2C_CTRL_ENABLED;  /* Enable SCB block */
 124:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         }
 125:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         else
 126:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         {
 127:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* INTR_I2C_EC_WAKE_UP */
 128:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Wakes up device from deep sleep */
 129:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrCause & EZI2C_INTR_CAUSE_I2C_EC))
 130:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 131:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Disables wakeup interrupt source but does not clear it. It is cleared in INTR_SL
 132:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_SetI2CExtClkInterruptMode(EZI2C_NO_INTR_SOURCES);
 133:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 134:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 135:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrCause & (EZI2C_INTR_CAUSE_RX | EZI2C_INTR_CAUSE_SLAVE)))
 136:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 137:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* INTR_RX.NOT_EMPTY */
 138:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Receives data byte-by-byte. Does not use RX FIFO capabilities */
 139:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if (0u != (EZI2C_GetRxInterruptSourceMasked() & EZI2C_INTR_RX_NOT_EMPTY))
 140:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 141:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #if(EZI2C_SECONDARY_ADDRESS_ENABLE_CONST)
 142:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* If I2C_STOP service is delayed to I2C_ADDR_MATCH the address byte is in the 
 143:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     * RX_NOT_EMPTY is enabled. The address byte has to stay into RX FIFO therefore
 144:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     * RX.NOT_EMPTY service has to be skipped. The address byte has to be read by I2
 145:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     */
 146:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if (0u == (locIntrCause & EZI2C_INTR_CAUSE_SLAVE))
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 4


 147:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #endif /* (EZI2C_SECONDARY_ADDRESS_ENABLE_CONST) */
 148:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 149:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locByte = EZI2C_RX_FIFO_RD_REG;
 150:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 151:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         switch(EZI2C_fsmState)
 152:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 153:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         case EZI2C_EZI2C_FSM_BYTE_WRITE:
 154:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             if(0u != locBufSize)
 155:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             {
 156:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Store data byte and ACK */
 157:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 EZI2C_I2C_SLAVE_GENERATE_ACK;
 158:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 159:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 EZI2C_dataBuffer1[locIndex] = (uint8) locByte;
 160:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 locIndex++;
 161:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 locBufSize--;
 162:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             }
 163:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             else
 164:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             {
 165:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Discard data byte and NACK */
 166:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 EZI2C_I2C_SLAVE_GENERATE_NACK;
 167:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             }
 168:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             break;
 169:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 170:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(EZI2C_SUB_ADDRESS_SIZE16_CONST)
 171:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         case EZI2C_EZI2C_FSM_OFFSET_HI8:
 172:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 173:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_I2C_SLAVE_GENERATE_ACK;
 174:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 175:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Store offset most significant byre */
 176:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             locBufSize = (uint16) ((uint8) locByte);
 177:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 178:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_fsmState = EZI2C_EZI2C_FSM_OFFSET_LO8;
 179:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 180:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             break;
 181:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif /* (EZI2C_SUB_ADDRESS_SIZE16_CONST) */
 182:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 183:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         case EZI2C_EZI2C_FSM_OFFSET_LO8:
 184:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 185:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             #if (EZI2C_SUB_ADDRESS_SIZE16)
 186:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             {
 187:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Collect 2 bytes offset */
 188:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 locByte = ((uint32) ((uint32) locBufSize << 8u)) | locByte;
 189:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             }
 190:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             #endif
 191:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 192:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Check offset against buffer size */
 193:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             if(locByte < (uint32) EZI2C_bufSizeBuf1)
 194:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             {
 195:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 EZI2C_I2C_SLAVE_GENERATE_ACK;
 196:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 197:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Update local buffer index with new offset */
 198:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 locIndex = locByte;
 199:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 200:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Get available buffer size to write */
 201:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 locBufSize = (uint16) ((locByte < EZI2C_protectBuf1) ?
 202:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                                        (EZI2C_protectBuf1 - locByte) : (0u));
 203:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 5


 204:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             #if(EZI2C_CY_SCBIP_V0)
 205:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 206:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 if(locBufSize < EZI2C_EZI2C_FIFO_SIZE)
 207:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 {
 208:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     /* Set FSM state to receive byte by byte */
 209:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     EZI2C_fsmState = EZI2C_EZI2C_FSM_BYTE_WRITE;
 210:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 }
 211:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Receive RX FIFO chunks */
 212:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 else if(locBufSize == EZI2C_EZI2C_FIFO_SIZE)
 213:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 {
 214:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     EZI2C_ENABLE_SLAVE_AUTO_DATA; /* NACK when RX FIFO is full */
 215:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     EZI2C_SetRxInterruptMode(EZI2C_NO_INTR_SOURCES);
 216:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 }
 217:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 else
 218:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 {
 219:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     EZI2C_ENABLE_SLAVE_AUTO_DATA_ACK; /* Stretch when RX FIFO is fu
 220:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     EZI2C_SetRxInterruptMode(EZI2C_INTR_RX_FULL);
 221:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 }
 222:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 223:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             #else
 224:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 225:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 #if(EZI2C_SECONDARY_ADDRESS_ENABLE)
 226:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 {
 227:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     /* Set FSM state to receive byte by byte.
 228:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     * The byte by byte receive is always chosen for two addresses. 
 229:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     */
 230:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     EZI2C_fsmState = EZI2C_EZI2C_FSM_BYTE_WRITE;
 231:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 }
 232:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 #else
 233:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 {
 234:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     if (locBufSize < EZI2C_EZI2C_FIFO_SIZE)
 235:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     {
 236:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                         /* Set FSM state to receive byte by byte */
 237:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                         EZI2C_fsmState = EZI2C_EZI2C_FSM_BYTE_WRITE;
 238:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     }
 239:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     /* Receive RX FIFO chunks */
 240:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     else if (locBufSize == EZI2C_EZI2C_FIFO_SIZE)
 241:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     {
 242:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                         EZI2C_ENABLE_SLAVE_AUTO_DATA; /* NACK when RX FIFO is full 
 243:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                         EZI2C_SetRxInterruptMode(EZI2C_NO_INTR_SOURCES);
 244:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     }
 245:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     else
 246:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     {
 247:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                         EZI2C_ENABLE_SLAVE_AUTO_DATA_ACK; /* Stretch when RX FIFO i
 248:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                         EZI2C_SetRxInterruptMode(EZI2C_INTR_RX_FULL);
 249:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                     }
 250:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 }
 251:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 #endif
 252:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 253:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             #endif /* (EZI2C_CY_SCBIP_V0) */
 254:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 255:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Store local offset into global variable */
 256:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 EZI2C_EZI2C_SET_OFFSET(activeAddress, locIndex);
 257:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             }
 258:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             else
 259:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             {
 260:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Discard offset byte and NACK */
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 6


 261:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 EZI2C_I2C_SLAVE_GENERATE_NACK;
 262:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             }
 263:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             break;
 264:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 265:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         default:
 266:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             CYASSERT(0u != 0u); /* Should never get there */
 267:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             break;
 268:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 269:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 270:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearRxInterruptSource(EZI2C_INTR_RX_NOT_EMPTY);
 271:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 272:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 273:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* INTR_RX.FULL, INTR_SLAVE.I2C_STOP */
 274:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Receive FIFO chunks: auto data ACK is enabled */
 275:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 else if (0u != (EZI2C_I2C_CTRL_REG & EZI2C_I2C_CTRL_S_READY_DATA_ACK))
 276:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 277:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Slave interrupt (I2C_STOP or I2C_ADDR_MATCH) leads to completion of read.
 278:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     * A completion event has a higher priority than the FIFO full.
 279:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     * Read remaining data from RX FIFO.
 280:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     */
 281:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(0u != (locIntrCause & EZI2C_INTR_CAUSE_SLAVE))
 282:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 283:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Read remaining bytes from RX FIFO */
 284:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         fifoIndex = EZI2C_GET_RX_FIFO_ENTRIES;
 285:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 286:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         #if(EZI2C_SECONDARY_ADDRESS_ENABLE)
 287:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 288:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Update with current address match */
 289:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             if(EZI2C_CHECK_INTR_SLAVE_MASKED(EZI2C_INTR_SLAVE_I2C_ADDR_MATCH))
 290:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             {
 291:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* Update RX FIFO entries as address byte is there now */
 292:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 fifoIndex = EZI2C_GET_RX_FIFO_ENTRIES;
 293:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 294:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 /* If SR is valid, RX FIFO is full and address is in SHIFTER:
 295:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 * read 8 entries and leave address in RX FIFO for further processin
 296:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 * If SR is invalid, address is already in RX FIFO: read (entries-1)
 297:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 */
 298:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                 fifoIndex -= ((0u != EZI2C_GET_RX_FIFO_SR_VALID) ? (0u) : (1u));
 299:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             }
 300:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 301:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         #endif
 302:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 303:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_DISABLE_SLAVE_AUTO_DATA;
 304:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         endTransfer = EZI2C_EZI2C_CONTINUE_TRANSFER;
 305:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 306:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     else
 307:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* INTR_RX_FULL */
 308:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Continue transfer or disable INTR_RX_FULL to catch completion event. */
 309:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 310:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Calculate buffer size available to write data into */
 311:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locBufSize -= (uint16) EZI2C_EZI2C_FIFO_SIZE;
 312:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 313:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         if(locBufSize <= EZI2C_EZI2C_FIFO_SIZE)
 314:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 315:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Send NACK when RX FIFO overflow */
 316:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             fifoIndex   = locBufSize;
 317:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             endTransfer = EZI2C_EZI2C_COMPLETE_TRANSFER;
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 7


 318:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 319:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         else
 320:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 321:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Continue  transaction */
 322:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             fifoIndex   = EZI2C_EZI2C_FIFO_SIZE;
 323:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             endTransfer = EZI2C_EZI2C_CONTINUE_TRANSFER;
 324:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 325:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 326:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 327:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     for(; (0u != fifoIndex); fifoIndex--)
 328:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 329:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Store data in buffer */
 330:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_dataBuffer1[locIndex] = (uint8) EZI2C_RX_FIFO_RD_REG;
 331:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locIndex++;
 332:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 333:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 334:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Complete transfer sending NACK when RX FIFO overflow */
 335:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(EZI2C_EZI2C_COMPLETE_TRANSFER == endTransfer)
 336:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 337:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ENABLE_SLAVE_AUTO_DATA_NACK;
 338:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 339:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Disable INTR_RX_FULL during last RX FIFO chunk reception */
 340:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_SetRxInterruptMode(EZI2C_NO_INTR_SOURCES);
 341:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 342:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 343:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_ClearRxInterruptSource(EZI2C_INTR_RX_FULL |
 344:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                                             EZI2C_INTR_RX_NOT_EMPTY);
 345:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 346:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 else
 347:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 348:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Exit for slave interrupts which are not active for RX direction:
 349:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     * INTR_SLAVE.I2C_ADDR_MATCH and INTR_SLAVE.I2C_STOP while byte-by-byte receptio
 350:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     */
 351:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 352:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 353:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 354:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrCause & EZI2C_INTR_CAUSE_SLAVE))
 355:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 356:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* INTR_SLAVE.I2C_STOP */
 357:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Catch Stop condition: completion of write or read transfer */
 358:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #if(!EZI2C_SECONDARY_ADDRESS_ENABLE_CONST)
 359:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if(0u != (locIntrSlave & EZI2C_INTR_SLAVE_I2C_STOP))
 360:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #else
 361:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Prevent triggering when matched address was NACKed */
 362:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if((0u != (locIntrSlave & EZI2C_INTR_SLAVE_I2C_STOP)) &&
 363:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                    (0u != ((uint8) EZI2C_EZI2C_STATUS_BUSY & EZI2C_curStatus)))
 364:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #endif
 365:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 366:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Disable TX and RX interrupt sources */
 367:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_SetRxInterruptMode(EZI2C_NO_INTR_SOURCES);
 368:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_SetTxInterruptMode(EZI2C_NO_INTR_SOURCES);
 369:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 370:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Set read completion mask */
 371:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locStatus = EZI2C_INTR_SLAVE_I2C_NACK;
 372:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 373:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Check if buffer content was modified: the address phase resets the locIndex 
 374:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(locIndex != EZI2C_EZI2C_GET_OFFSET(activeAddress))
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 8


 375:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 376:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locStatus |= EZI2C_INTR_SLAVE_I2C_WRITE_STOP;
 377:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 378:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 379:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Complete read or write transaction */
 380:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locStatus &= locIntrSlave;
 381:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_EZI2C_UPDATE_LOC_STATUS(activeAddress, locStatus);
 382:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locStatus |= (uint32)  EZI2C_curStatus;
 383:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locStatus &= (uint32) ~EZI2C_EZI2C_STATUS_BUSY;
 384:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_curStatus = (uint8) locStatus;
 385:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 386:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_fsmState = EZI2C_EZI2C_FSM_IDLE;
 387:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 388:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(EZI2C_SECONDARY_ADDRESS_ENABLE)
 389:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 390:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Store local index into global variable, before address phase */
 391:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_EZI2C_SET_INDEX(activeAddress, locIndex);
 392:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 393:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif
 394:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 395:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 396:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* INTR_SLAVE.I2C_ADDR_MATCH */
 397:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* The matched address is received: the slave starts its operation.
 398:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 * INTR_SLAVE_I2C_STOP updates the buffer index before the address phase for two add
 399:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 * This is done to update buffer index correctly before the address phase changes it
 400:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 */
 401:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if(0u != (locIntrSlave & EZI2C_INTR_SLAVE_I2C_ADDR_MATCH))
 402:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 403:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(EZI2C_SECONDARY_ADDRESS_ENABLE)
 404:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 405:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Read address byte from RX FIFO */
 406:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locByte = EZI2C_GET_I2C_7BIT_ADDRESS(EZI2C_RX_FIFO_RD_REG);
 407:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 408:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearRxInterruptSource(EZI2C_INTR_RX_NOT_EMPTY);
 409:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 410:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Check received address against device addresses */
 411:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         if(EZI2C_addrBuf1 == locByte)
 412:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 413:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Set buffer exposed to primary slave address */
 414:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_dataBuffer = EZI2C_dataBuffer1;
 415:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_bufSizeBuf = EZI2C_bufSizeBuf1;
 416:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_protectBuf = EZI2C_protectBuf1;
 417:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 418:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             activeAddress = EZI2C_EZI2C_ACTIVE_ADDRESS1;
 419:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 420:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         else if(EZI2C_addrBuf2 == locByte)
 421:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 422:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Set buffer exposed to secondary slave address */
 423:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_dataBuffer = EZI2C_dataBuffer2;
 424:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_bufSizeBuf = EZI2C_bufSizeBuf2;
 425:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_protectBuf = EZI2C_protectBuf2;
 426:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 427:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             activeAddress = EZI2C_EZI2C_ACTIVE_ADDRESS2;
 428:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 429:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         else
 430:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 431:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Address does not match */
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 9


 432:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             ackResponse = EZI2C_EZI2C_NACK_RECEIVED_ADDRESS;
 433:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 434:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 435:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif
 436:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 437:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #if(EZI2C_SECONDARY_ADDRESS_ENABLE_CONST)
 438:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(EZI2C_EZI2C_NACK_RECEIVED_ADDRESS == ackResponse)
 439:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 440:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Clear interrupt sources before NACK address */
 441:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearI2CExtClkInterruptSource(EZI2C_INTR_I2C_EC_WAKE_UP);
 442:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearSlaveInterruptSource(EZI2C_INTR_SLAVE_ALL);
 443:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 444:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(!EZI2C_CY_SCBIP_V0)
 445:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Disable INTR_I2C_STOP to not trigger after matched address is NACKed. Ti
 446:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_DISABLE_INTR_SLAVE(EZI2C_INTR_SLAVE_I2C_STOP);
 447:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif /* (!EZI2C_CY_SCBIP_V0) */
 448:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 449:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* NACK address byte: it does not match neither primary nor secondary */
 450:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_I2C_SLAVE_GENERATE_NACK;
 451:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 452:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     else
 453:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #endif /* (EZI2C_SECONDARY_ADDRESS_ENABLE_CONST) */
 454:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 455:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 456:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(EZI2C_SCB_MODE_UNCONFIG_CONST_CFG)
 457:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         if(!EZI2C_SECONDARY_ADDRESS_ENABLE)
 458:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 459:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Set buffer exposed to primary slave address */
 460:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_dataBuffer = EZI2C_dataBuffer1;
 461:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_bufSizeBuf = EZI2C_bufSizeBuf1;
 462:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_protectBuf = EZI2C_protectBuf1;
 463:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 464:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             activeAddress = EZI2C_EZI2C_ACTIVE_ADDRESS1;
 465:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 466:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif /* (EZI2C_SCB_MODE_UNCONFIG_CONST_CFG) */
 467:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 468:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Bus becomes busy after address is received */
 469:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_curStatus |= (uint8) EZI2C_EZI2C_STATUS_BUSY;
 470:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 471:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Slave is read or written: set current offset */
 472:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locIndex = EZI2C_EZI2C_GET_OFFSET(activeAddress);
 473:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 474:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Check transaction direction */
 475:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         if(EZI2C_CHECK_I2C_STATUS(EZI2C_I2C_STATUS_S_READ))
 476:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 477:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Calculate slave buffer size */
 478:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             locBufSize = EZI2C_bufSizeBuf1 - (uint16) locIndex;
 479:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 480:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Clear TX FIFO to start fill from offset */
 481:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_CLEAR_TX_FIFO;
 482:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_SetTxInterruptMode(EZI2C_INTR_TX_EMPTY);
 483:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
 484:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         else
 485:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         {
 486:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             /* Master writes: enable reception interrupt. The FSM state was set in 
 487:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                             EZI2C_SetRxInterruptMode(EZI2C_INTR_RX_NOT_EMPTY);
 488:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         }
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 10


 489:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 490:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Clear interrupt sources before ACK address */
 491:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearI2CExtClkInterruptSource(EZI2C_INTR_I2C_EC_WAKE_UP);
 492:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearSlaveInterruptSource(EZI2C_INTR_SLAVE_ALL);
 493:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 494:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if (!EZI2C_CY_SCBIP_V0)
 495:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Enable STOP to trigger after address match is ACKed. Ticket ID#156094 */
 496:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ENABLE_INTR_SLAVE(EZI2C_INTR_SLAVE_I2C_STOP);
 497:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif /* (!EZI2C_CY_SCBIP_V0) */
 498:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 499:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* ACK the address byte */
 500:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_I2C_SLAVE_GENERATE_ACK;
 501:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 502:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 503:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 504:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Clear slave interrupt sources */
 505:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_ClearSlaveInterruptSource(locIntrSlave);
 506:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 507:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 508:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* INTR_TX.EMPTY */
 509:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Transmits data to the master: loads data into the TX FIFO. The 0xFF sends out if the
 510:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             * out the buffer. The address reception with a read flag clears the TX FIFO to be loade
 511:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             */
 512:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (EZI2C_GetInterruptCause() & EZI2C_INTR_CAUSE_TX))
 513:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 514:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Put data into TX FIFO until there is a room */
 515:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 do
 516:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 517:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Check transmit buffer range: locBufSize calculates after address reception *
 518:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(0u != locBufSize)
 519:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 520:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_TX_FIFO_WR_REG = (uint32) EZI2C_dataBuffer1[locIndex];
 521:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locIndex++;
 522:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locBufSize--;
 523:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 524:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     else
 525:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 526:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_TX_FIFO_WR_REG = EZI2C_EZI2C_OVFL_RETURN;
 527:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 528:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 529:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 while(EZI2C_EZI2C_FIFO_SIZE != EZI2C_GET_TX_FIFO_ENTRIES);
 530:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 531:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_ClearTxInterruptSource(EZI2C_INTR_TX_EMPTY);
 532:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 533:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         }
 534:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 535:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Store local index copy into global variable */
 536:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         EZI2C_EZI2C_SET_INDEX(activeAddress, locIndex);
 537:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 538:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #ifdef EZI2C_EZI2C_STRETCH_ISR_EXIT_CALLBACK
 539:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         EZI2C_EZI2C_STRETCH_ISR_ExitCallback();
 540:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* EZI2C_EZI2C_STRETCH_ISR_EXIT_CALLBACK */
 541:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 542:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     }
 543:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** #endif /* (EZI2C_EZI2C_SCL_STRETCH_ENABLE_CONST) */
 544:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 545:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 11


 546:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** #if(EZI2C_EZI2C_SCL_STRETCH_DISABLE_CONST)
 547:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     /*******************************************************************************
 548:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     * Function Name: EZI2C_EZI2C_NO_STRETCH_ISR
 549:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     ****************************************************************************//**
 550:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *
 551:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *  Handles the Interrupt Service Routine for the SCB EZI2C mode.
 552:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *  Clock stretching is NOT used during operation.
 553:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *
 554:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     *******************************************************************************/
 555:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     CY_ISR_PROTO(EZI2C_EZI2C_NO_STRETCH_ISR)
 556:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     {
  26              		.loc 1 556 0
  27              		.cfi_startproc
  28 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  29              		.cfi_def_cfa_offset 24
  30              		.cfi_offset 3, -24
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
 557:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #if(EZI2C_SUB_ADDRESS_SIZE16_CONST)
 558:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         static uint8 locOffset;
 559:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* (EZI2C_SUB_ADDRESS_SIZE16_CONST) */
 560:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 561:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locByte;
 562:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locStatus;
 563:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locIntrSlave;
 564:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         uint32 locIntrCause;
 565:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 566:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #ifdef EZI2C_EZI2C_NO_STRETCH_ISR_ENTRY_CALLBACK
 567:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         EZI2C_EZI2C_NO_STRETCH_ISR_EntryCallback();
 568:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* EZI2C_EZI2C_NO_STRETCH_ISR_ENTRY_CALLBACK */
 569:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 570:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #if !defined (CY_REMOVE_EZI2C_CUSTOM_INTR_HANDLER)
 571:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Calls registered customer routine to manage interrupt sources */
 572:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         if(NULL != EZI2C_customIntrHandler)
  36              		.loc 1 572 0
  37 0002 6E4B     		ldr	r3, .L26
  38 0004 1B68     		ldr	r3, [r3]
  39 0006 002B     		cmp	r3, #0
  40 0008 00D0     		beq	.L2
 573:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         {
 574:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_customIntrHandler();
  41              		.loc 1 574 0
  42 000a 9847     		blx	r3
  43              	.LVL0:
  44              	.L2:
 575:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         }
 576:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #else
 577:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         CY_EZI2C_CUSTOM_INTR_HANDLER();
 578:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* !defined (CY_REMOVE_EZI2C_CUSTOM_INTR_HANDLER) */
 579:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 580:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         locByte = 0u;
 581:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 582:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Get copy of triggered slave interrupt sources */
 583:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         locIntrSlave = EZI2C_GetSlaveInterruptSource();
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 12


  45              		.loc 1 583 0
  46 000c 6C4B     		ldr	r3, .L26+4
  47 000e 1C68     		ldr	r4, [r3]
  48              	.LVL1:
 584:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         locIntrCause = EZI2C_GetInterruptCause();
  49              		.loc 1 584 0
  50 0010 6C4B     		ldr	r3, .L26+8
  51 0012 1E68     		ldr	r6, [r3]
  52              	.LVL2:
 585:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 586:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* INTR_SLAVE.I2C_ARB_LOST and INTR_SLAVE.I2C_BUS_ERROR */
 587:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         /* Handles errors on the bus: There are cases when both bits are set.
 588:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         * The error recovery is common: re-enable the scb IP. The content of the RX FIFO is lost.
 589:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         */
 590:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         if(0u != (locIntrSlave & (EZI2C_INTR_SLAVE_I2C_ARB_LOST |
  53              		.loc 1 590 0
  54 0014 0223     		mov	r3, #2
  55 0016 FF33     		add	r3, r3, #255
  56 0018 1C42     		tst	r4, r3
  57 001a 2AD0     		beq	.L3
 591:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                                   EZI2C_INTR_SLAVE_I2C_BUS_ERROR)))
 592:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         {
 593:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_CTRL_REG &= (uint32) ~EZI2C_CTRL_ENABLED; /* Disable SCB block */
  58              		.loc 1 593 0
  59 001c 6A4A     		ldr	r2, .L26+12
  60 001e 1368     		ldr	r3, [r2]
  61 0020 5B00     		lsl	r3, r3, #1
  62 0022 5B08     		lsr	r3, r3, #1
  63 0024 1360     		str	r3, [r2]
 594:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 595:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #if (EZI2C_CY_SCBIP_V0)
 596:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrSlave & EZI2C_INTR_SLAVE_I2C_ADDR_MATCH))
 597:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #endif /* (EZI2C_CY_SCBIP_V0) */
 598:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 599:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_curStatus |= (uint8) EZI2C_EZI2C_STATUS_ERR;
  64              		.loc 1 599 0
  65 0026 694A     		ldr	r2, .L26+16
  66 0028 1178     		ldrb	r1, [r2]
  67 002a 1023     		mov	r3, #16
  68 002c 0B43     		orr	r3, r1
  69 002e 1370     		strb	r3, [r2]
 600:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 601:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if(0u != (EZI2C_EZI2C_FSM_WRITE_MASK & EZI2C_fsmState))
  70              		.loc 1 601 0
  71 0030 674B     		ldr	r3, .L26+20
  72 0032 1B78     		ldrb	r3, [r3]
  73 0034 DB07     		lsl	r3, r3, #31
  74 0036 0BD5     		bpl	.L4
 602:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 603:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Write complete */
 604:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(EZI2C_indexBuf1 != EZI2C_offsetBuf1)
  75              		.loc 1 604 0
  76 0038 664B     		ldr	r3, .L26+24
  77 003a 1A78     		ldrb	r2, [r3]
  78 003c 664B     		ldr	r3, .L26+28
  79 003e 1B88     		ldrh	r3, [r3]
  80 0040 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 13


  81 0042 0AD0     		beq	.L5
 605:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 606:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_curStatus |= (uint8) EZI2C_INTR_SLAVE_I2C_WRITE_STOP;
  82              		.loc 1 606 0
  83 0044 614A     		ldr	r2, .L26+16
  84 0046 1178     		ldrb	r1, [r2]
  85 0048 0823     		mov	r3, #8
  86 004a 0B43     		orr	r3, r1
  87 004c 1370     		strb	r3, [r2]
  88 004e 04E0     		b	.L5
  89              	.L4:
 607:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 608:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 609:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 else
 610:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 611:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Read complete */
 612:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_curStatus |= (uint8) EZI2C_INTR_SLAVE_I2C_NACK;
  90              		.loc 1 612 0
  91 0050 5E4A     		ldr	r2, .L26+16
  92 0052 1178     		ldrb	r1, [r2]
  93 0054 0223     		mov	r3, #2
  94 0056 0B43     		orr	r3, r1
  95 0058 1370     		strb	r3, [r2]
  96              	.L5:
 613:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 614:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 615:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 616:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Clean-up interrupt sources */
 617:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_SetTxInterruptMode(EZI2C_NO_INTR_SOURCES);
  97              		.loc 1 617 0
  98 005a 0023     		mov	r3, #0
  99 005c 5F4A     		ldr	r2, .L26+32
 100 005e 1360     		str	r3, [r2]
 618:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 619:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #if (EZI2C_CY_SCBIP_V0)
 620:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Clear interrupt sources as they are not automatically cleared after SCB is disabled 
 621:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_ClearRxInterruptSource(EZI2C_INTR_RX_NOT_EMPTY);
 622:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_ClearSlaveInterruptSource(EZI2C_INTR_SLAVE_ALL);
 623:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #endif /* (EZI2C_CY_SCBIP_V0) */
 624:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 625:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_fsmState = EZI2C_EZI2C_FSM_IDLE;
 101              		.loc 1 625 0
 102 0060 5B4A     		ldr	r2, .L26+20
 103 0062 1370     		strb	r3, [r2]
 626:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 627:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             EZI2C_CTRL_REG |= (uint32) EZI2C_CTRL_ENABLED;  /* Enable SCB block */
 104              		.loc 1 627 0
 105 0064 584A     		ldr	r2, .L26+12
 106 0066 1368     		ldr	r3, [r2]
 107 0068 8021     		mov	r1, #128
 108 006a 0906     		lsl	r1, r1, #24
 109 006c 0B43     		orr	r3, r1
 110 006e 1360     		str	r3, [r2]
 111 0070 A3E0     		b	.L1
 112              	.L3:
 628:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         }
 629:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         else
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 14


 630:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         {
 631:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* INTR_RX.NOT_EMPTY */
 632:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* The slave receives data from the master: accepts into the RX FIFO. At least one entr
 633:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             * read. The offset is written first and all the following bytes are data (expected to b
 634:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             * The slave ACKs all bytes, but it discards them if they do not match the write criteri
 635:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             * The slave NACKs the bytes in the case of an RX FIFO overflow.
 636:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             */
 637:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrCause & EZI2C_INTR_CAUSE_RX))
 113              		.loc 1 637 0
 114 0072 3307     		lsl	r3, r6, #28
 115 0074 44D5     		bpl	.L22
 638:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 639:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Read byte from the RX FIFO */
 640:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 locByte = EZI2C_RX_FIFO_RD_REG;
 116              		.loc 1 640 0
 117 0076 5A4B     		ldr	r3, .L26+36
 118 0078 1D68     		ldr	r5, [r3]
 119              	.LVL3:
 641:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 642:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 switch(EZI2C_fsmState)
 120              		.loc 1 642 0
 121 007a 554B     		ldr	r3, .L26+20
 122 007c 1B78     		ldrb	r3, [r3]
 123 007e 012B     		cmp	r3, #1
 124 0080 04D0     		beq	.L9
 125 0082 002B     		cmp	r3, #0
 126 0084 16D0     		beq	.L10
 127 0086 032B     		cmp	r3, #3
 128 0088 28D0     		beq	.L11
 129 008a 32E0     		b	.L25
 130              	.L9:
 643:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 644:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 645:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 case EZI2C_EZI2C_FSM_BYTE_WRITE:
 646:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Check buffer index against protect area */
 647:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(EZI2C_indexBuf1 < EZI2C_protectBuf1)
 131              		.loc 1 647 0
 132 008c 524B     		ldr	r3, .L26+28
 133 008e 1B88     		ldrh	r3, [r3]
 134 0090 544A     		ldr	r2, .L26+40
 135 0092 1288     		ldrh	r2, [r2]
 136 0094 9342     		cmp	r3, r2
 137 0096 09D2     		bcs	.L12
 648:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 649:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Stores received byte into buffer */
 650:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_dataBuffer1[EZI2C_indexBuf1] = (uint8) locByte;
 138              		.loc 1 650 0
 139 0098 534A     		ldr	r2, .L26+44
 140 009a 1268     		ldr	r2, [r2]
 141 009c D318     		add	r3, r2, r3
 142 009e EAB2     		uxtb	r2, r5
 143 00a0 1A70     		strb	r2, [r3]
 651:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_indexBuf1++;
 144              		.loc 1 651 0
 145 00a2 4D4A     		ldr	r2, .L26+28
 146 00a4 1388     		ldrh	r3, [r2]
 147 00a6 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 15


 148 00a8 1380     		strh	r3, [r2]
 149 00aa 25E0     		b	.L13
 150              	.L12:
 652:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 653:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     else
 654:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 655:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Discard current byte and sets FSM state to discard following bytes */
 656:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_fsmState = EZI2C_EZI2C_FSM_WAIT_STOP;
 151              		.loc 1 656 0
 152 00ac 0322     		mov	r2, #3
 153 00ae 484B     		ldr	r3, .L26+20
 154 00b0 1A70     		strb	r2, [r3]
 155 00b2 21E0     		b	.L13
 156              	.L10:
 657:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 658:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 659:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     break;
 660:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 661:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #if(EZI2C_SUB_ADDRESS_SIZE16_CONST)
 662:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 case EZI2C_EZI2C_FSM_OFFSET_HI8:
 663:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 664:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Store high byte of offset */
 665:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locOffset = (uint8) locByte;
 666:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 667:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_fsmState  = EZI2C_EZI2C_FSM_OFFSET_LO8;
 668:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 669:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     break;
 670:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #endif /* (EZI2C_SUB_ADDRESS_SIZE16_CONST) */
 671:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 672:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 case EZI2C_EZI2C_FSM_OFFSET_LO8:
 673:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 674:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(EZI2C_SUB_ADDRESS_SIZE16)
 675:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 676:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Append offset with high byte */
 677:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         locByte = ((uint32) ((uint32) locOffset << 8u)) | locByte;
 678:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 679:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif
 680:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 681:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Check if offset within buffer range */
 682:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(locByte < (uint32) EZI2C_bufSizeBuf1)
 157              		.loc 1 682 0
 158 00b4 4D4B     		ldr	r3, .L26+48
 159 00b6 1B88     		ldrh	r3, [r3]
 160 00b8 AB42     		cmp	r3, r5
 161 00ba 07D9     		bls	.L14
 683:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 684:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Store and sets received offset */
 685:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_offsetBuf1 = (uint8) locByte;
 162              		.loc 1 685 0
 163 00bc 454B     		ldr	r3, .L26+24
 164 00be 1D70     		strb	r5, [r3]
 686:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_indexBuf1  = (uint16) locByte;
 165              		.loc 1 686 0
 166 00c0 454B     		ldr	r3, .L26+28
 167 00c2 1D80     		strh	r5, [r3]
 687:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 688:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Move FSM to data receive state */
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 16


 689:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_fsmState = EZI2C_EZI2C_FSM_BYTE_WRITE;
 168              		.loc 1 689 0
 169 00c4 0122     		mov	r2, #1
 170 00c6 424B     		ldr	r3, .L26+20
 171 00c8 1A70     		strb	r2, [r3]
 172 00ca 15E0     		b	.L13
 173              	.L14:
 690:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 691:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     else
 692:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 693:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Reset index due to TX FIFO fill */
 694:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_indexBuf1 = (uint16) EZI2C_offsetBuf1;
 174              		.loc 1 694 0
 175 00cc 414B     		ldr	r3, .L26+24
 176 00ce 1A78     		ldrb	r2, [r3]
 177 00d0 414B     		ldr	r3, .L26+28
 178 00d2 1A80     		strh	r2, [r3]
 695:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 696:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Discard current byte and sets FSM state to default to discard following 
 697:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_fsmState = EZI2C_EZI2C_FSM_WAIT_STOP;
 179              		.loc 1 697 0
 180 00d4 0322     		mov	r2, #3
 181 00d6 3E4B     		ldr	r3, .L26+20
 182 00d8 1A70     		strb	r2, [r3]
 183 00da 0DE0     		b	.L13
 184              	.L11:
 698:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 699:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 700:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     break;
 701:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 702:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 case EZI2C_EZI2C_FSM_WAIT_STOP:
 703:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Clear RX FIFO to discard all received data */
 704:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_CLEAR_RX_FIFO;
 185              		.loc 1 704 0
 186 00dc 444B     		ldr	r3, .L26+52
 187 00de 1A68     		ldr	r2, [r3]
 188 00e0 8021     		mov	r1, #128
 189 00e2 4902     		lsl	r1, r1, #9
 190 00e4 0A43     		orr	r2, r1
 191 00e6 1A60     		str	r2, [r3]
 192 00e8 1968     		ldr	r1, [r3]
 193 00ea 424A     		ldr	r2, .L26+56
 194 00ec 0A40     		and	r2, r1
 195 00ee 1A60     		str	r2, [r3]
 705:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 706:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     break;
 196              		.loc 1 706 0
 197 00f0 02E0     		b	.L13
 198              	.L25:
 707:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 708:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 default:
 709:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     CYASSERT(0u != 0u); /* Should never get there */
 199              		.loc 1 709 0 discriminator 1
 200 00f2 0020     		mov	r0, #0
 201 00f4 FFF7FEFF 		bl	CyHalt
 202              	.LVL4:
 203              	.L13:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 17


 710:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     break;
 711:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 712:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 713:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_ClearRxInterruptSource(EZI2C_INTR_RX_NOT_EMPTY);
 204              		.loc 1 713 0
 205 00f8 0422     		mov	r2, #4
 206 00fa 3F4B     		ldr	r3, .L26+60
 207 00fc 1A60     		str	r2, [r3]
 208 00fe 00E0     		b	.L7
 209              	.LVL5:
 210              	.L22:
 580:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 211              		.loc 1 580 0
 212 0100 0025     		mov	r5, #0
 213              	.LVL6:
 214              	.L7:
 714:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 715:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 716:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 717:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* INTR_SLAVE.I2C_START */
 718:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Catches start of transfer to trigger TX FIFO update event */
 719:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrSlave & EZI2C_INTR_SLAVE_I2C_START))
 215              		.loc 1 719 0
 216 0102 2021     		mov	r1, #32
 217 0104 2140     		and	r1, r4
 218 0106 1BD0     		beq	.L15
 720:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 721:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #if(!EZI2C_CY_SCBIP_V0)
 722:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #if(EZI2C_EZI2C_EC_AM_ENABLE)
 723:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 724:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Manage INTR_I2C_EC.WAKE_UP as slave busy status */
 725:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_ClearI2CExtClkInterruptSource(EZI2C_INTR_I2C_EC_WAKE_UP);
 726:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 727:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #else
 728:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 729:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Manage INTR_SLAVE.I2C_ADDR_MATCH as slave busy status */
 730:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_ClearSlaveInterruptSource(EZI2C_INTR_SLAVE_I2C_ADDR_MATCH);
 219              		.loc 1 730 0
 220 0108 2D4A     		ldr	r2, .L26+4
 221 010a 4023     		mov	r3, #64
 222 010c 1360     		str	r3, [r2]
 731:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 732:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #endif
 733:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #else
 734:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Manage INTR_SLAVE.I2C_ADDR_MATCH as slave busy status */
 735:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_ClearSlaveInterruptSource(EZI2C_INTR_SLAVE_I2C_ADDR_MATCH);
 736:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #endif /* (EZI2C_CY_SCBIP_V0) */
 737:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 738:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Clear TX FIFO and put a byte */
 739:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_FAST_CLEAR_TX_FIFO;
 223              		.loc 1 739 0
 224 010e 3B4B     		ldr	r3, .L26+64
 225 0110 3B48     		ldr	r0, .L26+68
 226 0112 1860     		str	r0, [r3]
 227 0114 0220     		mov	r0, #2
 228 0116 1860     		str	r0, [r3]
 740:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_TX_FIFO_WR_REG = (uint32) EZI2C_dataBuffer1[EZI2C_offsetBuf1];
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 18


 229              		.loc 1 740 0
 230 0118 2E4F     		ldr	r7, .L26+24
 231 011a 3B78     		ldrb	r3, [r7]
 232 011c 3248     		ldr	r0, .L26+44
 233 011e 0068     		ldr	r0, [r0]
 234 0120 C318     		add	r3, r0, r3
 235 0122 1B78     		ldrb	r3, [r3]
 236 0124 DBB2     		uxtb	r3, r3
 237 0126 3748     		ldr	r0, .L26+72
 238 0128 0360     		str	r3, [r0]
 741:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 742:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Store buffer index to be handled by INTR_SLAVE.I2C_STOP */
 743:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 locByte = (uint32) EZI2C_indexBuf1;
 239              		.loc 1 743 0
 240 012a 2B48     		ldr	r0, .L26+28
 241 012c 0588     		ldrh	r5, [r0]
 242              	.LVL7:
 744:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 745:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Update index: one byte is already in the TX FIFO */
 746:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_indexBuf1 = (uint16) EZI2C_offsetBuf1 + 1u;
 243              		.loc 1 746 0
 244 012e 3B78     		ldrb	r3, [r7]
 245 0130 0133     		add	r3, r3, #1
 246 0132 0380     		strh	r3, [r0]
 747:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 748:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Enable INTR_TX.NOT_FULL to load TX FIFO */
 749:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_SetTxInterruptMode(EZI2C_INTR_TX_TRIGGER);
 247              		.loc 1 749 0
 248 0134 0120     		mov	r0, #1
 249 0136 294B     		ldr	r3, .L26+32
 250 0138 1860     		str	r0, [r3]
 750:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 751:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Clear locIntrSlave after INTR.TX_TRIGGER is enabled */
 752:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_ClearSlaveInterruptSource(locIntrSlave);
 251              		.loc 1 752 0
 252 013a 1460     		str	r4, [r2]
 753:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 754:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 locIntrCause |= EZI2C_INTR_CAUSE_TX;
 253              		.loc 1 754 0
 254 013c 0423     		mov	r3, #4
 255 013e 1E43     		orr	r6, r3
 256              	.LVL8:
 257              	.L15:
 755:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 756:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 757:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 758:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* INTR_TX.TRIGGER */
 759:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Transmits data to the master: loads data into the TX FIFO. The TX FIFO is loaded wit
 760:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             *  until used entries are less than EZI2C_TX_LOAD_SIZE. If index reaches end of the
 761:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             *  buffer the 0xFF is sent to the end of transfer.
 762:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             */
 763:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrCause & EZI2C_INTR_CAUSE_TX))
 258              		.loc 1 763 0
 259 0140 7307     		lsl	r3, r6, #29
 260 0142 1DD5     		bpl	.L16
 261              	.L19:
 764:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 19


 765:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Put data into TX FIFO until there is room */
 766:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 do
 767:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 768:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Check transmit buffer range */
 769:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     if(EZI2C_indexBuf1 < EZI2C_bufSizeBuf1)
 262              		.loc 1 769 0
 263 0144 244B     		ldr	r3, .L26+28
 264 0146 1B88     		ldrh	r3, [r3]
 265 0148 284A     		ldr	r2, .L26+48
 266 014a 1288     		ldrh	r2, [r2]
 267 014c 9342     		cmp	r3, r2
 268 014e 0BD2     		bcs	.L17
 770:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 771:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_TX_FIFO_WR_REG = (uint32) EZI2C_dataBuffer1[EZI2C_indexBuf1];
 269              		.loc 1 771 0
 270 0150 254A     		ldr	r2, .L26+44
 271 0152 1268     		ldr	r2, [r2]
 272 0154 D318     		add	r3, r2, r3
 273 0156 1B78     		ldrb	r3, [r3]
 274 0158 DBB2     		uxtb	r3, r3
 275 015a 2A4A     		ldr	r2, .L26+72
 276 015c 1360     		str	r3, [r2]
 772:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_indexBuf1++;
 277              		.loc 1 772 0
 278 015e 1E4A     		ldr	r2, .L26+28
 279 0160 1388     		ldrh	r3, [r2]
 280 0162 0133     		add	r3, r3, #1
 281 0164 1380     		strh	r3, [r2]
 282 0166 02E0     		b	.L18
 283              	.L17:
 773:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 774:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     else
 775:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 776:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_TX_FIFO_WR_REG = EZI2C_EZI2C_OVFL_RETURN;
 284              		.loc 1 776 0
 285 0168 FF22     		mov	r2, #255
 286 016a 264B     		ldr	r3, .L26+72
 287 016c 1A60     		str	r2, [r3]
 288              	.L18:
 777:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 778:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 779:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 780:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 while(EZI2C_TX_LOAD_SIZE != EZI2C_GET_TX_FIFO_ENTRIES);
 289              		.loc 1 780 0
 290 016e 264B     		ldr	r3, .L26+76
 291 0170 1B68     		ldr	r3, [r3]
 292 0172 1F22     		mov	r2, #31
 293 0174 1340     		and	r3, r2
 294 0176 022B     		cmp	r3, #2
 295 0178 E4D1     		bne	.L19
 781:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 782:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_ClearTxInterruptSource(EZI2C_INTR_TX_TRIGGER);
 296              		.loc 1 782 0
 297 017a 1E3A     		sub	r2, r2, #30
 298 017c 234B     		ldr	r3, .L26+80
 299 017e 1A60     		str	r2, [r3]
 300              	.L16:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 20


 783:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 784:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 785:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 786:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* INTR_SLAVE.I2C_STOP */
 787:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             /* Catch completion of write or read transfer. */
 788:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             if(0u != (locIntrSlave & EZI2C_INTR_SLAVE_I2C_STOP))
 301              		.loc 1 788 0
 302 0180 E306     		lsl	r3, r4, #27
 303 0182 1AD5     		bpl	.L1
 789:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 790:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if(0u == (locIntrSlave & EZI2C_INTR_SLAVE_I2C_START))
 304              		.loc 1 790 0
 305 0184 0029     		cmp	r1, #0
 306 0186 03D1     		bne	.L20
 791:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 792:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #if(!EZI2C_CY_SCBIP_V0)
 793:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #if(EZI2C_EZI2C_EC_AM_ENABLE)
 794:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     {
 795:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         /* Manage INTR_I2C_EC.WAKE_UP as slave busy status */
 796:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                         EZI2C_ClearI2CExtClkInterruptSource(EZI2C_INTR_I2C_EC_WAKE_UP);
 797:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     }
 798:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     #endif
 799:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 #endif /* (!EZI2C_CY_SCBIP_V0) */
 800:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 801:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Manage INTR_SLAVE.I2C_ADDR_MATCH as slave busy status */
 802:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_ClearSlaveInterruptSource(locIntrSlave);
 307              		.loc 1 802 0
 308 0188 0D4B     		ldr	r3, .L26+4
 309 018a 1C60     		str	r4, [r3]
 803:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 804:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Read current buffer index */
 805:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locByte = (uint32) EZI2C_indexBuf1;
 310              		.loc 1 805 0
 311 018c 124B     		ldr	r3, .L26+28
 312 018e 1D88     		ldrh	r5, [r3]
 313              	.LVL9:
 314              	.L20:
 806:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 807:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 808:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Set read completion mask */
 809:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 locStatus = EZI2C_INTR_SLAVE_I2C_NACK;
 810:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 811:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if((locByte != EZI2C_offsetBuf1) &&
 315              		.loc 1 811 0
 316 0190 104B     		ldr	r3, .L26+24
 317 0192 1B78     		ldrb	r3, [r3]
 318 0194 AB42     		cmp	r3, r5
 319 0196 05D0     		beq	.L23
 812:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                    (0u != (EZI2C_EZI2C_FSM_WRITE_MASK & EZI2C_fsmState)))
 320              		.loc 1 812 0 discriminator 1
 321 0198 0D4B     		ldr	r3, .L26+20
 322 019a 1B78     		ldrb	r3, [r3]
 811:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                    (0u != (EZI2C_EZI2C_FSM_WRITE_MASK & EZI2C_fsmState)))
 323              		.loc 1 811 0 discriminator 1
 324 019c DB07     		lsl	r3, r3, #31
 325 019e 03D4     		bmi	.L24
 809:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 21


 326              		.loc 1 809 0
 327 01a0 0223     		mov	r3, #2
 328 01a2 02E0     		b	.L21
 329              	.L23:
 330 01a4 0223     		mov	r3, #2
 331 01a6 00E0     		b	.L21
 332              	.L24:
 813:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 814:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     /* Set write completion mask */
 815:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     locStatus |= EZI2C_INTR_SLAVE_I2C_WRITE_STOP;
 333              		.loc 1 815 0
 334 01a8 0A23     		mov	r3, #10
 335              	.L21:
 336              	.LVL10:
 816:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 817:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 818:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Set completion flags in the status variable */
 819:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_curStatus |= (uint8) (locStatus & locIntrSlave);
 337              		.loc 1 819 0
 338 01aa 1C40     		and	r4, r3
 339              	.LVL11:
 340 01ac 074B     		ldr	r3, .L26+16
 341              	.LVL12:
 342 01ae 1A78     		ldrb	r2, [r3]
 343 01b0 1443     		orr	r4, r2
 344 01b2 1C70     		strb	r4, [r3]
 820:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 821:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 EZI2C_fsmState = EZI2C_EZI2C_FSM_IDLE;
 345              		.loc 1 821 0
 346 01b4 0022     		mov	r2, #0
 347 01b6 064B     		ldr	r3, .L26+20
 348 01b8 1A70     		strb	r2, [r3]
 349              	.LVL13:
 350              	.L1:
 822:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 823:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 824:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 825:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #if(!EZI2C_CY_SCBIP_V0)
 826:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #if(EZI2C_EZI2C_EC_AM_ENABLE)
 827:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             {
 828:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* INTR_I2C_EC.WAKE_UP */
 829:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 /* Wake up device from deep sleep on address match event. The matched address is NA
 830:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 if(0u != (locIntrCause & EZI2C_INTR_CAUSE_I2C_EC))
 831:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 {
 832:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_I2C_SLAVE_GENERATE_NACK; /* NACK in active mode */
 833:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                     EZI2C_ClearI2CExtClkInterruptSource(EZI2C_INTR_I2C_EC_WAKE_UP);
 834:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****                 }
 835:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             }
 836:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****             #endif
 837:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         #endif /* (!EZI2C_CY_SCBIP_V0) */
 838:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         }
 839:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 840:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #ifdef EZI2C_EZI2C_NO_STRETCH_ISR_EXIT_CALLBACK
 841:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****         EZI2C_EZI2C_NO_STRETCH_ISR_ExitCallback();
 842:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     #endif /* EZI2C_EZI2C_NO_STRETCH_ISR_EXIT_CALLBACK */
 843:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c **** 
 844:Generated_Source\PSoC4/EZI2C_EZI2C_INT.c ****     }
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 22


 351              		.loc 1 844 0
 352              		@ sp needed
 353              	.LVL14:
 354 01ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 355              	.L27:
 356              		.align	2
 357              	.L26:
 358 01bc 00000000 		.word	EZI2C_customIntrHandler
 359 01c0 400F0940 		.word	1074335552
 360 01c4 000E0940 		.word	1074335232
 361 01c8 00000940 		.word	1074331648
 362 01cc 00000000 		.word	EZI2C_curStatus
 363 01d0 00000000 		.word	EZI2C_fsmState
 364 01d4 00000000 		.word	EZI2C_offsetBuf1
 365 01d8 00000000 		.word	EZI2C_indexBuf1
 366 01dc 880F0940 		.word	1074335624
 367 01e0 40030940 		.word	1074332480
 368 01e4 00000000 		.word	EZI2C_protectBuf1
 369 01e8 00000000 		.word	EZI2C_dataBuffer1
 370 01ec 00000000 		.word	EZI2C_bufSizeBuf1
 371 01f0 04030940 		.word	1074332420
 372 01f4 FFFFFEFF 		.word	-65537
 373 01f8 C00F0940 		.word	1074335680
 374 01fc 04020940 		.word	1074332164
 375 0200 02000100 		.word	65538
 376 0204 40020940 		.word	1074332224
 377 0208 08020940 		.word	1074332168
 378 020c 800F0940 		.word	1074335616
 379              		.cfi_endproc
 380              	.LFE1:
 381              		.size	EZI2C_EZI2C_NO_STRETCH_ISR, .-EZI2C_EZI2C_NO_STRETCH_ISR
 382              		.text
 383              	.Letext0:
 384              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 385              		.file 3 "Generated_Source\\PSoC4\\EZI2C_PVT.h"
 386              		.file 4 "Generated_Source\\PSoC4\\EZI2C_EZI2C_PVT.h"
 387              		.file 5 "Generated_Source\\PSoC4/CyLib.h"
 388              		.section	.debug_info,"",%progbits
 389              	.Ldebug_info0:
 390 0000 A2010000 		.4byte	0x1a2
 391 0004 0400     		.2byte	0x4
 392 0006 00000000 		.4byte	.Ldebug_abbrev0
 393 000a 04       		.byte	0x4
 394 000b 01       		.uleb128 0x1
 395 000c BC000000 		.4byte	.LASF30
 396 0010 01       		.byte	0x1
 397 0011 AD010000 		.4byte	.LASF31
 398 0015 57000000 		.4byte	.LASF32
 399 0019 00000000 		.4byte	.Ldebug_ranges0+0
 400 001d 00000000 		.4byte	0
 401 0021 00000000 		.4byte	.Ldebug_line0
 402 0025 02       		.uleb128 0x2
 403 0026 01       		.byte	0x1
 404 0027 06       		.byte	0x6
 405 0028 7F020000 		.4byte	.LASF0
 406 002c 02       		.uleb128 0x2
 407 002d 01       		.byte	0x1
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 23


 408 002e 08       		.byte	0x8
 409 002f AE000000 		.4byte	.LASF1
 410 0033 02       		.uleb128 0x2
 411 0034 02       		.byte	0x2
 412 0035 05       		.byte	0x5
 413 0036 4E020000 		.4byte	.LASF2
 414 003a 02       		.uleb128 0x2
 415 003b 02       		.byte	0x2
 416 003c 07       		.byte	0x7
 417 003d 37000000 		.4byte	.LASF3
 418 0041 02       		.uleb128 0x2
 419 0042 04       		.byte	0x4
 420 0043 05       		.byte	0x5
 421 0044 76020000 		.4byte	.LASF4
 422 0048 02       		.uleb128 0x2
 423 0049 04       		.byte	0x4
 424 004a 07       		.byte	0x7
 425 004b 58010000 		.4byte	.LASF5
 426 004f 02       		.uleb128 0x2
 427 0050 08       		.byte	0x8
 428 0051 05       		.byte	0x5
 429 0052 29020000 		.4byte	.LASF6
 430 0056 02       		.uleb128 0x2
 431 0057 08       		.byte	0x8
 432 0058 07       		.byte	0x7
 433 0059 F5010000 		.4byte	.LASF7
 434 005d 03       		.uleb128 0x3
 435 005e 04       		.byte	0x4
 436 005f 05       		.byte	0x5
 437 0060 696E7400 		.ascii	"int\000"
 438 0064 02       		.uleb128 0x2
 439 0065 04       		.byte	0x4
 440 0066 07       		.byte	0x7
 441 0067 E8010000 		.4byte	.LASF8
 442 006b 04       		.uleb128 0x4
 443 006c 6A010000 		.4byte	.LASF9
 444 0070 02       		.byte	0x2
 445 0071 B901     		.2byte	0x1b9
 446 0073 2C000000 		.4byte	0x2c
 447 0077 04       		.uleb128 0x4
 448 0078 9F010000 		.4byte	.LASF10
 449 007c 02       		.byte	0x2
 450 007d BA01     		.2byte	0x1ba
 451 007f 3A000000 		.4byte	0x3a
 452 0083 04       		.uleb128 0x4
 453 0084 A6010000 		.4byte	.LASF11
 454 0088 02       		.byte	0x2
 455 0089 BB01     		.2byte	0x1bb
 456 008b 48000000 		.4byte	0x48
 457 008f 02       		.uleb128 0x2
 458 0090 04       		.byte	0x4
 459 0091 04       		.byte	0x4
 460 0092 A8000000 		.4byte	.LASF12
 461 0096 02       		.uleb128 0x2
 462 0097 08       		.byte	0x8
 463 0098 04       		.byte	0x4
 464 0099 98010000 		.4byte	.LASF13
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 24


 465 009d 02       		.uleb128 0x2
 466 009e 01       		.byte	0x1
 467 009f 08       		.byte	0x8
 468 00a0 37020000 		.4byte	.LASF14
 469 00a4 05       		.uleb128 0x5
 470 00a5 6B000000 		.4byte	0x6b
 471 00a9 04       		.uleb128 0x4
 472 00aa 00000000 		.4byte	.LASF15
 473 00ae 02       		.byte	0x2
 474 00af 6502     		.2byte	0x265
 475 00b1 B5000000 		.4byte	0xb5
 476 00b5 05       		.uleb128 0x5
 477 00b6 83000000 		.4byte	0x83
 478 00ba 04       		.uleb128 0x4
 479 00bb 0C020000 		.4byte	.LASF16
 480 00bf 02       		.byte	0x2
 481 00c0 7502     		.2byte	0x275
 482 00c2 C6000000 		.4byte	0xc6
 483 00c6 06       		.uleb128 0x6
 484 00c7 04       		.byte	0x4
 485 00c8 CC000000 		.4byte	0xcc
 486 00cc 07       		.uleb128 0x7
 487 00cd 02       		.uleb128 0x2
 488 00ce 04       		.byte	0x4
 489 00cf 07       		.byte	0x7
 490 00d0 20020000 		.4byte	.LASF17
 491 00d4 08       		.uleb128 0x8
 492 00d5 93020000 		.4byte	.LASF33
 493 00d9 01       		.byte	0x1
 494 00da 2B02     		.2byte	0x22b
 495 00dc 00000000 		.4byte	.LFB1
 496 00e0 10020000 		.4byte	.LFE1-.LFB1
 497 00e4 01       		.uleb128 0x1
 498 00e5 9C       		.byte	0x9c
 499 00e6 3A010000 		.4byte	0x13a
 500 00ea 09       		.uleb128 0x9
 501 00eb 8B020000 		.4byte	.LASF18
 502 00ef 01       		.byte	0x1
 503 00f0 3102     		.2byte	0x231
 504 00f2 83000000 		.4byte	0x83
 505 00f6 00000000 		.4byte	.LLST0
 506 00fa 09       		.uleb128 0x9
 507 00fb 4E010000 		.4byte	.LASF19
 508 00ff 01       		.byte	0x1
 509 0100 3202     		.2byte	0x232
 510 0102 83000000 		.4byte	0x83
 511 0106 36000000 		.4byte	.LLST1
 512 010a 09       		.uleb128 0x9
 513 010b 4A000000 		.4byte	.LASF20
 514 010f 01       		.byte	0x1
 515 0110 3302     		.2byte	0x233
 516 0112 83000000 		.4byte	0x83
 517 0116 55000000 		.4byte	.LLST2
 518 011a 09       		.uleb128 0x9
 519 011b 69020000 		.4byte	.LASF21
 520 011f 01       		.byte	0x1
 521 0120 3402     		.2byte	0x234
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 25


 522 0122 83000000 		.4byte	0x83
 523 0126 68000000 		.4byte	.LLST3
 524 012a 0A       		.uleb128 0xa
 525 012b F8000000 		.4byte	.LVL4
 526 012f 98010000 		.4byte	0x198
 527 0133 0B       		.uleb128 0xb
 528 0134 01       		.uleb128 0x1
 529 0135 50       		.byte	0x50
 530 0136 01       		.uleb128 0x1
 531 0137 30       		.byte	0x30
 532 0138 00       		.byte	0
 533 0139 00       		.byte	0
 534 013a 0C       		.uleb128 0xc
 535 013b 70010000 		.4byte	.LASF22
 536 013f 03       		.byte	0x3
 537 0140 3B       		.byte	0x3b
 538 0141 BA000000 		.4byte	0xba
 539 0145 0C       		.uleb128 0xc
 540 0146 06000000 		.4byte	.LASF23
 541 014a 04       		.byte	0x4
 542 014b 1E       		.byte	0x1e
 543 014c A4000000 		.4byte	0xa4
 544 0150 0C       		.uleb128 0xc
 545 0151 28000000 		.4byte	.LASF24
 546 0155 04       		.byte	0x4
 547 0156 1F       		.byte	0x1f
 548 0157 6B000000 		.4byte	0x6b
 549 015b 0C       		.uleb128 0xc
 550 015c 3C020000 		.4byte	.LASF25
 551 0160 04       		.byte	0x4
 552 0161 22       		.byte	0x22
 553 0162 66010000 		.4byte	0x166
 554 0166 06       		.uleb128 0x6
 555 0167 04       		.byte	0x4
 556 0168 A4000000 		.4byte	0xa4
 557 016c 0C       		.uleb128 0xc
 558 016d 16000000 		.4byte	.LASF26
 559 0171 04       		.byte	0x4
 560 0172 23       		.byte	0x23
 561 0173 77000000 		.4byte	0x77
 562 0177 0C       		.uleb128 0xc
 563 0178 D6010000 		.4byte	.LASF27
 564 017c 04       		.byte	0x4
 565 017d 24       		.byte	0x24
 566 017e 77000000 		.4byte	0x77
 567 0182 0C       		.uleb128 0xc
 568 0183 58020000 		.4byte	.LASF28
 569 0187 04       		.byte	0x4
 570 0188 25       		.byte	0x25
 571 0189 6B000000 		.4byte	0x6b
 572 018d 0C       		.uleb128 0xc
 573 018e 88010000 		.4byte	.LASF29
 574 0192 04       		.byte	0x4
 575 0193 26       		.byte	0x26
 576 0194 77000000 		.4byte	0x77
 577 0198 0D       		.uleb128 0xd
 578 0199 19020000 		.4byte	.LASF34
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 26


 579 019d 05       		.byte	0x5
 580 019e E7       		.byte	0xe7
 581 019f 0E       		.uleb128 0xe
 582 01a0 6B000000 		.4byte	0x6b
 583 01a4 00       		.byte	0
 584 01a5 00       		.byte	0
 585              		.section	.debug_abbrev,"",%progbits
 586              	.Ldebug_abbrev0:
 587 0000 01       		.uleb128 0x1
 588 0001 11       		.uleb128 0x11
 589 0002 01       		.byte	0x1
 590 0003 25       		.uleb128 0x25
 591 0004 0E       		.uleb128 0xe
 592 0005 13       		.uleb128 0x13
 593 0006 0B       		.uleb128 0xb
 594 0007 03       		.uleb128 0x3
 595 0008 0E       		.uleb128 0xe
 596 0009 1B       		.uleb128 0x1b
 597 000a 0E       		.uleb128 0xe
 598 000b 55       		.uleb128 0x55
 599 000c 17       		.uleb128 0x17
 600 000d 11       		.uleb128 0x11
 601 000e 01       		.uleb128 0x1
 602 000f 10       		.uleb128 0x10
 603 0010 17       		.uleb128 0x17
 604 0011 00       		.byte	0
 605 0012 00       		.byte	0
 606 0013 02       		.uleb128 0x2
 607 0014 24       		.uleb128 0x24
 608 0015 00       		.byte	0
 609 0016 0B       		.uleb128 0xb
 610 0017 0B       		.uleb128 0xb
 611 0018 3E       		.uleb128 0x3e
 612 0019 0B       		.uleb128 0xb
 613 001a 03       		.uleb128 0x3
 614 001b 0E       		.uleb128 0xe
 615 001c 00       		.byte	0
 616 001d 00       		.byte	0
 617 001e 03       		.uleb128 0x3
 618 001f 24       		.uleb128 0x24
 619 0020 00       		.byte	0
 620 0021 0B       		.uleb128 0xb
 621 0022 0B       		.uleb128 0xb
 622 0023 3E       		.uleb128 0x3e
 623 0024 0B       		.uleb128 0xb
 624 0025 03       		.uleb128 0x3
 625 0026 08       		.uleb128 0x8
 626 0027 00       		.byte	0
 627 0028 00       		.byte	0
 628 0029 04       		.uleb128 0x4
 629 002a 16       		.uleb128 0x16
 630 002b 00       		.byte	0
 631 002c 03       		.uleb128 0x3
 632 002d 0E       		.uleb128 0xe
 633 002e 3A       		.uleb128 0x3a
 634 002f 0B       		.uleb128 0xb
 635 0030 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 27


 636 0031 05       		.uleb128 0x5
 637 0032 49       		.uleb128 0x49
 638 0033 13       		.uleb128 0x13
 639 0034 00       		.byte	0
 640 0035 00       		.byte	0
 641 0036 05       		.uleb128 0x5
 642 0037 35       		.uleb128 0x35
 643 0038 00       		.byte	0
 644 0039 49       		.uleb128 0x49
 645 003a 13       		.uleb128 0x13
 646 003b 00       		.byte	0
 647 003c 00       		.byte	0
 648 003d 06       		.uleb128 0x6
 649 003e 0F       		.uleb128 0xf
 650 003f 00       		.byte	0
 651 0040 0B       		.uleb128 0xb
 652 0041 0B       		.uleb128 0xb
 653 0042 49       		.uleb128 0x49
 654 0043 13       		.uleb128 0x13
 655 0044 00       		.byte	0
 656 0045 00       		.byte	0
 657 0046 07       		.uleb128 0x7
 658 0047 15       		.uleb128 0x15
 659 0048 00       		.byte	0
 660 0049 27       		.uleb128 0x27
 661 004a 19       		.uleb128 0x19
 662 004b 00       		.byte	0
 663 004c 00       		.byte	0
 664 004d 08       		.uleb128 0x8
 665 004e 2E       		.uleb128 0x2e
 666 004f 01       		.byte	0x1
 667 0050 3F       		.uleb128 0x3f
 668 0051 19       		.uleb128 0x19
 669 0052 03       		.uleb128 0x3
 670 0053 0E       		.uleb128 0xe
 671 0054 3A       		.uleb128 0x3a
 672 0055 0B       		.uleb128 0xb
 673 0056 3B       		.uleb128 0x3b
 674 0057 05       		.uleb128 0x5
 675 0058 27       		.uleb128 0x27
 676 0059 19       		.uleb128 0x19
 677 005a 11       		.uleb128 0x11
 678 005b 01       		.uleb128 0x1
 679 005c 12       		.uleb128 0x12
 680 005d 06       		.uleb128 0x6
 681 005e 40       		.uleb128 0x40
 682 005f 18       		.uleb128 0x18
 683 0060 9642     		.uleb128 0x2116
 684 0062 19       		.uleb128 0x19
 685 0063 01       		.uleb128 0x1
 686 0064 13       		.uleb128 0x13
 687 0065 00       		.byte	0
 688 0066 00       		.byte	0
 689 0067 09       		.uleb128 0x9
 690 0068 34       		.uleb128 0x34
 691 0069 00       		.byte	0
 692 006a 03       		.uleb128 0x3
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 28


 693 006b 0E       		.uleb128 0xe
 694 006c 3A       		.uleb128 0x3a
 695 006d 0B       		.uleb128 0xb
 696 006e 3B       		.uleb128 0x3b
 697 006f 05       		.uleb128 0x5
 698 0070 49       		.uleb128 0x49
 699 0071 13       		.uleb128 0x13
 700 0072 02       		.uleb128 0x2
 701 0073 17       		.uleb128 0x17
 702 0074 00       		.byte	0
 703 0075 00       		.byte	0
 704 0076 0A       		.uleb128 0xa
 705 0077 898201   		.uleb128 0x4109
 706 007a 01       		.byte	0x1
 707 007b 11       		.uleb128 0x11
 708 007c 01       		.uleb128 0x1
 709 007d 31       		.uleb128 0x31
 710 007e 13       		.uleb128 0x13
 711 007f 00       		.byte	0
 712 0080 00       		.byte	0
 713 0081 0B       		.uleb128 0xb
 714 0082 8A8201   		.uleb128 0x410a
 715 0085 00       		.byte	0
 716 0086 02       		.uleb128 0x2
 717 0087 18       		.uleb128 0x18
 718 0088 9142     		.uleb128 0x2111
 719 008a 18       		.uleb128 0x18
 720 008b 00       		.byte	0
 721 008c 00       		.byte	0
 722 008d 0C       		.uleb128 0xc
 723 008e 34       		.uleb128 0x34
 724 008f 00       		.byte	0
 725 0090 03       		.uleb128 0x3
 726 0091 0E       		.uleb128 0xe
 727 0092 3A       		.uleb128 0x3a
 728 0093 0B       		.uleb128 0xb
 729 0094 3B       		.uleb128 0x3b
 730 0095 0B       		.uleb128 0xb
 731 0096 49       		.uleb128 0x49
 732 0097 13       		.uleb128 0x13
 733 0098 3F       		.uleb128 0x3f
 734 0099 19       		.uleb128 0x19
 735 009a 3C       		.uleb128 0x3c
 736 009b 19       		.uleb128 0x19
 737 009c 00       		.byte	0
 738 009d 00       		.byte	0
 739 009e 0D       		.uleb128 0xd
 740 009f 2E       		.uleb128 0x2e
 741 00a0 01       		.byte	0x1
 742 00a1 3F       		.uleb128 0x3f
 743 00a2 19       		.uleb128 0x19
 744 00a3 03       		.uleb128 0x3
 745 00a4 0E       		.uleb128 0xe
 746 00a5 3A       		.uleb128 0x3a
 747 00a6 0B       		.uleb128 0xb
 748 00a7 3B       		.uleb128 0x3b
 749 00a8 0B       		.uleb128 0xb
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 29


 750 00a9 27       		.uleb128 0x27
 751 00aa 19       		.uleb128 0x19
 752 00ab 3C       		.uleb128 0x3c
 753 00ac 19       		.uleb128 0x19
 754 00ad 00       		.byte	0
 755 00ae 00       		.byte	0
 756 00af 0E       		.uleb128 0xe
 757 00b0 05       		.uleb128 0x5
 758 00b1 00       		.byte	0
 759 00b2 49       		.uleb128 0x49
 760 00b3 13       		.uleb128 0x13
 761 00b4 00       		.byte	0
 762 00b5 00       		.byte	0
 763 00b6 00       		.byte	0
 764              		.section	.debug_loc,"",%progbits
 765              	.Ldebug_loc0:
 766              	.LLST0:
 767 0000 0C000000 		.4byte	.LVL0
 768 0004 7A000000 		.4byte	.LVL3
 769 0008 0200     		.2byte	0x2
 770 000a 30       		.byte	0x30
 771 000b 9F       		.byte	0x9f
 772 000c 7A000000 		.4byte	.LVL3
 773 0010 00010000 		.4byte	.LVL5
 774 0014 0100     		.2byte	0x1
 775 0016 55       		.byte	0x55
 776 0017 00010000 		.4byte	.LVL5
 777 001b 02010000 		.4byte	.LVL6
 778 001f 0200     		.2byte	0x2
 779 0021 30       		.byte	0x30
 780 0022 9F       		.byte	0x9f
 781 0023 02010000 		.4byte	.LVL6
 782 0027 BA010000 		.4byte	.LVL13
 783 002b 0100     		.2byte	0x1
 784 002d 55       		.byte	0x55
 785 002e 00000000 		.4byte	0
 786 0032 00000000 		.4byte	0
 787              	.LLST1:
 788 0036 90010000 		.4byte	.LVL9
 789 003a AA010000 		.4byte	.LVL10
 790 003e 0200     		.2byte	0x2
 791 0040 32       		.byte	0x32
 792 0041 9F       		.byte	0x9f
 793 0042 AA010000 		.4byte	.LVL10
 794 0046 AE010000 		.4byte	.LVL12
 795 004a 0100     		.2byte	0x1
 796 004c 53       		.byte	0x53
 797 004d 00000000 		.4byte	0
 798 0051 00000000 		.4byte	0
 799              	.LLST2:
 800 0055 10000000 		.4byte	.LVL1
 801 0059 AC010000 		.4byte	.LVL11
 802 005d 0100     		.2byte	0x1
 803 005f 54       		.byte	0x54
 804 0060 00000000 		.4byte	0
 805 0064 00000000 		.4byte	0
 806              	.LLST3:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 30


 807 0068 14000000 		.4byte	.LVL2
 808 006c BA010000 		.4byte	.LVL14
 809 0070 0100     		.2byte	0x1
 810 0072 56       		.byte	0x56
 811 0073 00000000 		.4byte	0
 812 0077 00000000 		.4byte	0
 813              		.section	.debug_aranges,"",%progbits
 814 0000 1C000000 		.4byte	0x1c
 815 0004 0200     		.2byte	0x2
 816 0006 00000000 		.4byte	.Ldebug_info0
 817 000a 04       		.byte	0x4
 818 000b 00       		.byte	0
 819 000c 0000     		.2byte	0
 820 000e 0000     		.2byte	0
 821 0010 00000000 		.4byte	.LFB1
 822 0014 10020000 		.4byte	.LFE1-.LFB1
 823 0018 00000000 		.4byte	0
 824 001c 00000000 		.4byte	0
 825              		.section	.debug_ranges,"",%progbits
 826              	.Ldebug_ranges0:
 827 0000 00000000 		.4byte	.LFB1
 828 0004 10020000 		.4byte	.LFE1
 829 0008 00000000 		.4byte	0
 830 000c 00000000 		.4byte	0
 831              		.section	.debug_line,"",%progbits
 832              	.Ldebug_line0:
 833 0000 F1000000 		.section	.debug_str,"MS",%progbits,1
 833      02007B00 
 833      00000201 
 833      FB0E0D00 
 833      01010101 
 834              	.LASF15:
 835 0000 72656733 		.ascii	"reg32\000"
 835      3200
 836              	.LASF23:
 837 0006 455A4932 		.ascii	"EZI2C_curStatus\000"
 837      435F6375 
 837      72537461 
 837      74757300 
 838              	.LASF26:
 839 0016 455A4932 		.ascii	"EZI2C_bufSizeBuf1\000"
 839      435F6275 
 839      6653697A 
 839      65427566 
 839      3100
 840              	.LASF24:
 841 0028 455A4932 		.ascii	"EZI2C_fsmState\000"
 841      435F6673 
 841      6D537461 
 841      746500
 842              	.LASF3:
 843 0037 73686F72 		.ascii	"short unsigned int\000"
 843      7420756E 
 843      7369676E 
 843      65642069 
 843      6E7400
 844              	.LASF20:
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 31


 845 004a 6C6F6349 		.ascii	"locIntrSlave\000"
 845      6E747253 
 845      6C617665 
 845      00
 846              	.LASF32:
 847 0057 433A5C47 		.ascii	"C:\\Git\\WA101\\projects\\PSoC\\WW101_AnalogCoProce"
 847      69745C57 
 847      41313031 
 847      5C70726F 
 847      6A656374 
 848 0085 73736F72 		.ascii	"ssor\\WW101_AnalogCoProcessor.cydsn\000"
 848      5C575731 
 848      30315F41 
 848      6E616C6F 
 848      67436F50 
 849              	.LASF12:
 850 00a8 666C6F61 		.ascii	"float\000"
 850      7400
 851              	.LASF1:
 852 00ae 756E7369 		.ascii	"unsigned char\000"
 852      676E6564 
 852      20636861 
 852      7200
 853              	.LASF30:
 854 00bc 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 854      4320342E 
 854      392E3320 
 854      32303135 
 854      30333033 
 855 00ef 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 855      20726576 
 855      6973696F 
 855      6E203232 
 855      31323230 
 856 0122 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 856      67202D66 
 856      66756E63 
 856      74696F6E 
 856      2D736563 
 857              	.LASF19:
 858 014e 6C6F6353 		.ascii	"locStatus\000"
 858      74617475 
 858      7300
 859              	.LASF5:
 860 0158 6C6F6E67 		.ascii	"long unsigned int\000"
 860      20756E73 
 860      69676E65 
 860      6420696E 
 860      7400
 861              	.LASF9:
 862 016a 75696E74 		.ascii	"uint8\000"
 862      3800
 863              	.LASF22:
 864 0170 455A4932 		.ascii	"EZI2C_customIntrHandler\000"
 864      435F6375 
 864      73746F6D 
 864      496E7472 
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 32


 864      48616E64 
 865              	.LASF29:
 866 0188 455A4932 		.ascii	"EZI2C_indexBuf1\000"
 866      435F696E 
 866      64657842 
 866      75663100 
 867              	.LASF13:
 868 0198 646F7562 		.ascii	"double\000"
 868      6C6500
 869              	.LASF10:
 870 019f 75696E74 		.ascii	"uint16\000"
 870      313600
 871              	.LASF11:
 872 01a6 75696E74 		.ascii	"uint32\000"
 872      333200
 873              	.LASF31:
 874 01ad 47656E65 		.ascii	"Generated_Source\\PSoC4\\EZI2C_EZI2C_INT.c\000"
 874      72617465 
 874      645F536F 
 874      75726365 
 874      5C50536F 
 875              	.LASF27:
 876 01d6 455A4932 		.ascii	"EZI2C_protectBuf1\000"
 876      435F7072 
 876      6F746563 
 876      74427566 
 876      3100
 877              	.LASF8:
 878 01e8 756E7369 		.ascii	"unsigned int\000"
 878      676E6564 
 878      20696E74 
 878      00
 879              	.LASF7:
 880 01f5 6C6F6E67 		.ascii	"long long unsigned int\000"
 880      206C6F6E 
 880      6720756E 
 880      7369676E 
 880      65642069 
 881              	.LASF16:
 882 020c 63796973 		.ascii	"cyisraddress\000"
 882      72616464 
 882      72657373 
 882      00
 883              	.LASF34:
 884 0219 43794861 		.ascii	"CyHalt\000"
 884      6C7400
 885              	.LASF17:
 886 0220 73697A65 		.ascii	"sizetype\000"
 886      74797065 
 886      00
 887              	.LASF6:
 888 0229 6C6F6E67 		.ascii	"long long int\000"
 888      206C6F6E 
 888      6720696E 
 888      7400
 889              	.LASF14:
 890 0237 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\Greg\AppData\Local\Temp\ccW2uAsn.s 			page 33


 890      00
 891              	.LASF25:
 892 023c 455A4932 		.ascii	"EZI2C_dataBuffer1\000"
 892      435F6461 
 892      74614275 
 892      66666572 
 892      3100
 893              	.LASF2:
 894 024e 73686F72 		.ascii	"short int\000"
 894      7420696E 
 894      7400
 895              	.LASF28:
 896 0258 455A4932 		.ascii	"EZI2C_offsetBuf1\000"
 896      435F6F66 
 896      66736574 
 896      42756631 
 896      00
 897              	.LASF21:
 898 0269 6C6F6349 		.ascii	"locIntrCause\000"
 898      6E747243 
 898      61757365 
 898      00
 899              	.LASF4:
 900 0276 6C6F6E67 		.ascii	"long int\000"
 900      20696E74 
 900      00
 901              	.LASF0:
 902 027f 7369676E 		.ascii	"signed char\000"
 902      65642063 
 902      68617200 
 903              	.LASF18:
 904 028b 6C6F6342 		.ascii	"locByte\000"
 904      79746500 
 905              	.LASF33:
 906 0293 455A4932 		.ascii	"EZI2C_EZI2C_NO_STRETCH_ISR\000"
 906      435F455A 
 906      4932435F 
 906      4E4F5F53 
 906      54524554 
 907              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
